# プラグインの管理
# 基本的にはinit.vimでgithubからダウンロード
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

# PlantUML用のシンタックスハイライト
[[plugins]]
repo = 'aklt/plantuml-syntax'

# ブランチやタグを指定したいとき
[[plugins]]
repo = 'delphinus35/typescript-vim'
rev  = 'colorize-template-strings'

# カラーテーマのicebergを設定
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
 source ~/.config/nvim/plugins/iceberg.rc.vim
'''

# 特定の条件で読み込みたいとき
[[plugins]]
repo = 'elzr/vim-json'
if   = '''! has('kaoriya')'''

# ファイラ上のアイコン表示
[[plugins]]
repo ='kristijanhusak/defx-icons'

# ファイラ上のgit表示
[[plugins]]
repo ='kristijanhusak/defx-git'
hook_add = '''
	let g:defx_git#indicators = {
		\ 'Modified'  : '+',
		\ 'Staged'    : '●',
		\ 'Untracked' : '?',
		\ 'Renamed'   : '➜',
		\ 'Unmerged'  : '═',
		\ 'Deleted'   : 'x',
		\ 'Unknown'   : '?'
		\ }
'''

# ファイラ
[[plugins]]
repo ='Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-icons', 'defx-git']
hook_add = '''
	nnoremap <silent> <Space>f :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
	function! Root(path) abort
		return fnamemodify(a:path, ':t')
	endfunction

	call defx#custom#source('file', {
			\ 'root': 'Root',
			\})

	call defx#custom#column('filename', {
			\ 'directory_icon': '',
			\ 'opened_icon': '',
			\ })

	call defx#custom#column('mark', {
			\ 'readonly_icon': '✗',
			\ 'selected_icon': '✓',
			\ })

	call defx#custom#option('_', {
			\ 'columns': 'indent:git:icons:filename',
			\ 'show_ignored_files': 1,
			\ })
'''
# [plugins.ftplugin]
# defx = '''
# 	nnoremap <silent><buffer><expr> ~ defx#async_action('cd')
# 	nnoremap <silent><buffer><expr> h defx#async_action('cd', ['..'])
# 	nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
# 	nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
# 	nnoremap <silent><buffer><expr> l defx#async_action('open')
#
# 	nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
# 	nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
# 	nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
# 	nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
# 	nnoremap <silent><buffer><expr> q defx#do_action('quit')
#
# 	nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
# 	nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')
#
# 	nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
# 	nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
# 	nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
# 	nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
# 	nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
# 	nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
# 	nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
# 	nnoremap <silent><buffer><expr> N defx#do_action('new_file')
# 	nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
# 	nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
# 	nnoremap <silent><buffer><expr> c defx#do_action('copy')
# 	nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
# 	nnoremap <silent><buffer><expr> m defx#do_action('move')
# 	nnoremap <silent><buffer><expr> p defx#do_action('paste')
# 	nnoremap <silent><buffer><expr> r defx#do_action('rename')
# 	nnoremap <silent><buffer><expr> se defx#do_action('save_session')
# 	nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
# 	nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
# 	nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
# '''

# [[plugins]]
# repo = 'scrooloose/nerdtree'
#
# [[plugins]]
# repo = 'jistr/vim-nerdtree-tabs'
# hook_add = '''
#   " NERDTreeTabsをnvim起動時に同時に起動
#   let g:nerdtree_tabs_open_on_console_startup=1
# '''
#
# [[plugins]]
# repo = 'Xuyuanp/nerdtree-git-plugin'
#
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
'''

# コメント関連
[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo='evidens/vim-twig'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'


# カッコを付ける系
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
  let g:auto_save = 1
  let g:auto_save_in_insert_mode = 0
'''

# ステータスラインやタブ周りの見た目の設定
[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-fugitive', 'vim-airline-themes']
hook_add = '''
 source ~/.config/nvim/plugins/airline.rc.vim
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1
  " 編集中のlintはしない
  let g:ale_lint_on_text_changed = 'never'

  " lint結果をロケーションリストとQuickFixには表示しない
  " 出てると結構うざいしQuickFixを書き換えられるのは困る
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
'''

# Markdownをブラウザと同期して表示
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app & yarn install'
hook_add = '''
  source ~/.config/nvim/plugins/markdown-preview.rc.vim
'''

# LSP(Laungage Server Protcol)用
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
 source ~/.config/nvim/plugins/coc-setting.rc.vim
'''
